{"ast":null,"code":"/*! @azure/msal-browser v4.8.0 2025-03-20 */\n'use strict';\n\nimport { createClientConfigurationError, ClientConfigurationErrorCodes, invokeAsync, PerformanceEvents, RequestParameterBuilder, Constants, AuthorizeProtocol, ProtocolMode, AuthenticationScheme, PopTokenGenerator } from '@azure/msal-common/browser';\nimport { BrowserConstants } from '../utils/BrowserConstants.mjs';\nimport { version } from '../packageMetadata.mjs';\nimport { CryptoOps } from '../crypto/CryptoOps.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Returns map of parameters that are applicable to all calls to /authorize whether using PKCE or EAR\r\n * @param config\r\n * @param authority\r\n * @param request\r\n * @param logger\r\n * @param performanceClient\r\n * @returns\r\n */\nasync function getStandardParameters(config, authority, request, logger, performanceClient) {\n  const parameters = AuthorizeProtocol.getStandardAuthorizeRequestParameters({\n    ...config.auth,\n    authority: authority\n  }, request, logger, performanceClient);\n  RequestParameterBuilder.addLibraryInfo(parameters, {\n    sku: BrowserConstants.MSAL_SKU,\n    version: version,\n    os: \"\",\n    cpu: \"\"\n  });\n  if (config.auth.protocolMode !== ProtocolMode.OIDC) {\n    RequestParameterBuilder.addApplicationTelemetry(parameters, config.telemetry.application);\n  }\n  if (request.platformBroker) {\n    // signal ests that this is a WAM call\n    RequestParameterBuilder.addNativeBroker(parameters);\n    // pass the req_cnf for POP\n    if (request.authenticationScheme === AuthenticationScheme.POP) {\n      const cryptoOps = new CryptoOps(logger, performanceClient);\n      const popTokenGenerator = new PopTokenGenerator(cryptoOps);\n      // req_cnf is always sent as a string for SPAs\n      let reqCnfData;\n      if (!request.popKid) {\n        const generatedReqCnfData = await invokeAsync(popTokenGenerator.generateCnf.bind(popTokenGenerator), PerformanceEvents.PopTokenGenerateCnf, logger, performanceClient, request.correlationId)(request, logger);\n        reqCnfData = generatedReqCnfData.reqCnfString;\n      } else {\n        reqCnfData = cryptoOps.encodeKid(request.popKid);\n      }\n      RequestParameterBuilder.addPopToken(parameters, reqCnfData);\n    }\n  }\n  RequestParameterBuilder.instrumentBrokerParams(parameters, request.correlationId, performanceClient);\n  return parameters;\n}\n/**\r\n * Gets the full /authorize URL with request parameters when using Auth Code + PKCE\r\n * @param config\r\n * @param authority\r\n * @param request\r\n * @param logger\r\n * @param performanceClient\r\n * @returns\r\n */\nasync function getAuthCodeRequestUrl(config, authority, request, logger, performanceClient) {\n  if (!request.codeChallenge) {\n    throw createClientConfigurationError(ClientConfigurationErrorCodes.pkceParamsMissing);\n  }\n  const parameters = await invokeAsync(getStandardParameters, PerformanceEvents.GetStandardParams, logger, performanceClient, request.correlationId)(config, authority, request, logger, performanceClient);\n  RequestParameterBuilder.addResponseTypeCode(parameters);\n  RequestParameterBuilder.addCodeChallengeParams(parameters, request.codeChallenge, Constants.S256_CODE_CHALLENGE_METHOD);\n  return AuthorizeProtocol.getAuthorizeUrl(authority, parameters);\n}\nexport { getAuthCodeRequestUrl };","map":{"version":3,"names":["getStandardParameters","config","authority","request","logger","performanceClient","parameters","AuthorizeProtocol","getStandardAuthorizeRequestParameters","auth","RequestParameterBuilder","addLibraryInfo","sku","BrowserConstants","MSAL_SKU","version","os","cpu","protocolMode","ProtocolMode","OIDC","addApplicationTelemetry","telemetry","application","platformBroker","addNativeBroker","authenticationScheme","AuthenticationScheme","POP","cryptoOps","CryptoOps","popTokenGenerator","PopTokenGenerator","reqCnfData","popKid","generatedReqCnfData","invokeAsync","generateCnf","bind","PerformanceEvents","PopTokenGenerateCnf","correlationId","reqCnfString","encodeKid","addPopToken","instrumentBrokerParams","getAuthCodeRequestUrl","codeChallenge","createClientConfigurationError","ClientConfigurationErrorCodes","pkceParamsMissing","GetStandardParams","addResponseTypeCode","addCodeChallengeParams","Constants","S256_CODE_CHALLENGE_METHOD","getAuthorizeUrl"],"sources":["C:\\Users\\Kaleb\\OneDrive\\Desktop\\profilematcher\\frontend\\node_modules\\@azure\\msal-browser\\src\\protocol\\Authorize.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AuthenticationScheme,\n    Authority,\n    AuthorizeProtocol,\n    ClientConfigurationErrorCodes,\n    CommonAuthorizationUrlRequest,\n    createClientConfigurationError,\n    invokeAsync,\n    IPerformanceClient,\n    Logger,\n    PerformanceEvents,\n    PopTokenGenerator,\n    ProtocolMode,\n    RequestParameterBuilder,\n    Constants,\n} from \"@azure/msal-common/browser\";\nimport { BrowserConfiguration } from \"../config/Configuration.js\";\nimport { BrowserConstants } from \"../utils/BrowserConstants.js\";\nimport { version } from \"../packageMetadata.js\";\nimport { CryptoOps } from \"../crypto/CryptoOps.js\";\n\n/**\n * Returns map of parameters that are applicable to all calls to /authorize whether using PKCE or EAR\n * @param config\n * @param authority\n * @param request\n * @param logger\n * @param performanceClient\n * @returns\n */\nasync function getStandardParameters(\n    config: BrowserConfiguration,\n    authority: Authority,\n    request: CommonAuthorizationUrlRequest,\n    logger: Logger,\n    performanceClient: IPerformanceClient\n): Promise<Map<string, string>> {\n    const parameters = AuthorizeProtocol.getStandardAuthorizeRequestParameters(\n        { ...config.auth, authority: authority },\n        request,\n        logger,\n        performanceClient\n    );\n    RequestParameterBuilder.addLibraryInfo(parameters, {\n        sku: BrowserConstants.MSAL_SKU,\n        version: version,\n        os: \"\",\n        cpu: \"\",\n    });\n    if (config.auth.protocolMode !== ProtocolMode.OIDC) {\n        RequestParameterBuilder.addApplicationTelemetry(\n            parameters,\n            config.telemetry.application\n        );\n    }\n\n    if (request.platformBroker) {\n        // signal ests that this is a WAM call\n        RequestParameterBuilder.addNativeBroker(parameters);\n\n        // pass the req_cnf for POP\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\n            const cryptoOps = new CryptoOps(logger, performanceClient);\n            const popTokenGenerator = new PopTokenGenerator(cryptoOps);\n\n            // req_cnf is always sent as a string for SPAs\n            let reqCnfData;\n            if (!request.popKid) {\n                const generatedReqCnfData = await invokeAsync(\n                    popTokenGenerator.generateCnf.bind(popTokenGenerator),\n                    PerformanceEvents.PopTokenGenerateCnf,\n                    logger,\n                    performanceClient,\n                    request.correlationId\n                )(request, logger);\n                reqCnfData = generatedReqCnfData.reqCnfString;\n            } else {\n                reqCnfData = cryptoOps.encodeKid(request.popKid);\n            }\n            RequestParameterBuilder.addPopToken(parameters, reqCnfData);\n        }\n    }\n\n    RequestParameterBuilder.instrumentBrokerParams(\n        parameters,\n        request.correlationId,\n        performanceClient\n    );\n\n    return parameters;\n}\n\n/**\n * Gets the full /authorize URL with request parameters when using Auth Code + PKCE\n * @param config\n * @param authority\n * @param request\n * @param logger\n * @param performanceClient\n * @returns\n */\nexport async function getAuthCodeRequestUrl(\n    config: BrowserConfiguration,\n    authority: Authority,\n    request: CommonAuthorizationUrlRequest,\n    logger: Logger,\n    performanceClient: IPerformanceClient\n): Promise<string> {\n    if (!request.codeChallenge) {\n        throw createClientConfigurationError(\n            ClientConfigurationErrorCodes.pkceParamsMissing\n        );\n    }\n\n    const parameters = await invokeAsync(\n        getStandardParameters,\n        PerformanceEvents.GetStandardParams,\n        logger,\n        performanceClient,\n        request.correlationId\n    )(config, authority, request, logger, performanceClient);\n    RequestParameterBuilder.addResponseTypeCode(parameters);\n\n    RequestParameterBuilder.addCodeChallengeParams(\n        parameters,\n        request.codeChallenge,\n        Constants.S256_CODE_CHALLENGE_METHOD\n    );\n\n    return AuthorizeProtocol.getAuthorizeUrl(authority, parameters);\n}\n"],"mappings":";;;;;;;;AAAA;;;AAGG;AAuBH;;;;;;;;AAQG;AACH,eAAeA,qBAAqBA,CAChCC,MAA4B,EAC5BC,SAAoB,EACpBC,OAAsC,EACtCC,MAAc,EACdC,iBAAqC;EAErC,MAAMC,UAAU,GAAGC,iBAAiB,CAACC,qCAAqC,CACtE;IAAE,GAAGP,MAAM,CAACQ,IAAI;IAAEP,SAAS,EAAEA;EAAS,CAAE,EACxCC,OAAO,EACPC,MAAM,EACNC,iBAAiB,CACpB;EACDK,uBAAuB,CAACC,cAAc,CAACL,UAAU,EAAE;IAC/CM,GAAG,EAAEC,gBAAgB,CAACC,QAAQ;IAC9BC,OAAO,EAAEA,OAAO;IAChBC,EAAE,EAAE,EAAE;IACNC,GAAG,EAAE;EACR,EAAC;EACF,IAAIhB,MAAM,CAACQ,IAAI,CAACS,YAAY,KAAKC,YAAY,CAACC,IAAI,EAAE;IAChDV,uBAAuB,CAACW,uBAAuB,CAC3Cf,UAAU,EACVL,MAAM,CAACqB,SAAS,CAACC,WAAW,CAC/B;EACJ;EAED,IAAIpB,OAAO,CAACqB,cAAc,EAAE;;IAExBd,uBAAuB,CAACe,eAAe,CAACnB,UAAU,CAAC;;IAGnD,IAAIH,OAAO,CAACuB,oBAAoB,KAAKC,oBAAoB,CAACC,GAAG,EAAE;MAC3D,MAAMC,SAAS,GAAG,IAAIC,SAAS,CAAC1B,MAAM,EAAEC,iBAAiB,CAAC;MAC1D,MAAM0B,iBAAiB,GAAG,IAAIC,iBAAiB,CAACH,SAAS,CAAC;;MAG1D,IAAII,UAAU;MACd,IAAI,CAAC9B,OAAO,CAAC+B,MAAM,EAAE;QACjB,MAAMC,mBAAmB,GAAG,MAAMC,WAAW,CACzCL,iBAAiB,CAACM,WAAW,CAACC,IAAI,CAACP,iBAAiB,CAAC,EACrDQ,iBAAiB,CAACC,mBAAmB,EACrCpC,MAAM,EACNC,iBAAiB,EACjBF,OAAO,CAACsC,aAAa,CACxB,CAACtC,OAAO,EAAEC,MAAM,CAAC;QAClB6B,UAAU,GAAGE,mBAAmB,CAACO,YAAY;MAChD,OAAM;QACHT,UAAU,GAAGJ,SAAS,CAACc,SAAS,CAACxC,OAAO,CAAC+B,MAAM,CAAC;MACnD;MACDxB,uBAAuB,CAACkC,WAAW,CAACtC,UAAU,EAAE2B,UAAU,CAAC;IAC9D;EACJ;EAEDvB,uBAAuB,CAACmC,sBAAsB,CAC1CvC,UAAU,EACVH,OAAO,CAACsC,aAAa,EACrBpC,iBAAiB,CACpB;EAED,OAAOC,UAAU;AACrB;AAEA;;;;;;;;AAQG;AACI,eAAewC,qBAAqBA,CACvC7C,MAA4B,EAC5BC,SAAoB,EACpBC,OAAsC,EACtCC,MAAc,EACdC,iBAAqC;EAErC,IAAI,CAACF,OAAO,CAAC4C,aAAa,EAAE;IACxB,MAAMC,8BAA8B,CAChCC,6BAA6B,CAACC,iBAAiB,CAClD;EACJ;EAED,MAAM5C,UAAU,GAAG,MAAM8B,WAAW,CAChCpC,qBAAqB,EACrBuC,iBAAiB,CAACY,iBAAiB,EACnC/C,MAAM,EACNC,iBAAiB,EACjBF,OAAO,CAACsC,aAAa,CACxB,CAACxC,MAAM,EAAEC,SAAS,EAAEC,OAAO,EAAEC,MAAM,EAAEC,iBAAiB,CAAC;EACxDK,uBAAuB,CAAC0C,mBAAmB,CAAC9C,UAAU,CAAC;EAEvDI,uBAAuB,CAAC2C,sBAAsB,CAC1C/C,UAAU,EACVH,OAAO,CAAC4C,aAAa,EACrBO,SAAS,CAACC,0BAA0B,CACvC;EAED,OAAOhD,iBAAiB,CAACiD,eAAe,CAACtD,SAAS,EAAEI,UAAU,CAAC;AACnE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}